/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as authImport } from './routes/__auth'

// Create Virtual Routes

const DeviceIdLazyImport = createFileRoute('/$deviceId')()
const IndexLazyImport = createFileRoute('/')()
const authUserLazyImport = createFileRoute('/__auth/user')()
const authNodeLazyImport = createFileRoute('/__auth/node')()
const authGatewayLazyImport = createFileRoute('/__auth/gateway')()
const authDashboardLazyImport = createFileRoute('/__auth/dashboard')()
const authNodeNodeIdLazyImport = createFileRoute('/__auth/node/$nodeId')()

// Create/Update Routes

const DeviceIdLazyRoute = DeviceIdLazyImport.update({
  path: '/$deviceId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/$deviceId.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/__auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const authUserLazyRoute = authUserLazyImport
  .update({
    path: '/user',
    getParentRoute: () => authRoute,
  } as any)
  .lazy(() => import('./routes/__auth/user.lazy').then((d) => d.Route))

const authNodeLazyRoute = authNodeLazyImport
  .update({
    path: '/node',
    getParentRoute: () => authRoute,
  } as any)
  .lazy(() => import('./routes/__auth/node.lazy').then((d) => d.Route))

const authGatewayLazyRoute = authGatewayLazyImport
  .update({
    path: '/gateway',
    getParentRoute: () => authRoute,
  } as any)
  .lazy(() => import('./routes/__auth/gateway.lazy').then((d) => d.Route))

const authDashboardLazyRoute = authDashboardLazyImport
  .update({
    path: '/dashboard',
    getParentRoute: () => authRoute,
  } as any)
  .lazy(() => import('./routes/__auth/dashboard.lazy').then((d) => d.Route))

const authNodeNodeIdLazyRoute = authNodeNodeIdLazyImport
  .update({
    path: '/$nodeId',
    getParentRoute: () => authNodeLazyRoute,
  } as any)
  .lazy(() => import('./routes/__auth/node/$nodeId.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/__auth': {
      id: '/__auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/$deviceId': {
      id: '/$deviceId'
      path: '/$deviceId'
      fullPath: '/$deviceId'
      preLoaderRoute: typeof DeviceIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/__auth/dashboard': {
      id: '/__auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authDashboardLazyImport
      parentRoute: typeof authImport
    }
    '/__auth/gateway': {
      id: '/__auth/gateway'
      path: '/gateway'
      fullPath: '/gateway'
      preLoaderRoute: typeof authGatewayLazyImport
      parentRoute: typeof authImport
    }
    '/__auth/node': {
      id: '/__auth/node'
      path: '/node'
      fullPath: '/node'
      preLoaderRoute: typeof authNodeLazyImport
      parentRoute: typeof authImport
    }
    '/__auth/user': {
      id: '/__auth/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof authUserLazyImport
      parentRoute: typeof authImport
    }
    '/__auth/node/$nodeId': {
      id: '/__auth/node/$nodeId'
      path: '/$nodeId'
      fullPath: '/node/$nodeId'
      preLoaderRoute: typeof authNodeNodeIdLazyImport
      parentRoute: typeof authNodeLazyImport
    }
  }
}

// Create and export the route tree

interface authNodeLazyRouteChildren {
  authNodeNodeIdLazyRoute: typeof authNodeNodeIdLazyRoute
}

const authNodeLazyRouteChildren: authNodeLazyRouteChildren = {
  authNodeNodeIdLazyRoute: authNodeNodeIdLazyRoute,
}

const authNodeLazyRouteWithChildren = authNodeLazyRoute._addFileChildren(
  authNodeLazyRouteChildren,
)

interface authRouteChildren {
  authDashboardLazyRoute: typeof authDashboardLazyRoute
  authGatewayLazyRoute: typeof authGatewayLazyRoute
  authNodeLazyRoute: typeof authNodeLazyRouteWithChildren
  authUserLazyRoute: typeof authUserLazyRoute
}

const authRouteChildren: authRouteChildren = {
  authDashboardLazyRoute: authDashboardLazyRoute,
  authGatewayLazyRoute: authGatewayLazyRoute,
  authNodeLazyRoute: authNodeLazyRouteWithChildren,
  authUserLazyRoute: authUserLazyRoute,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof authRouteWithChildren
  '/login': typeof LoginRoute
  '/$deviceId': typeof DeviceIdLazyRoute
  '/dashboard': typeof authDashboardLazyRoute
  '/gateway': typeof authGatewayLazyRoute
  '/node': typeof authNodeLazyRouteWithChildren
  '/user': typeof authUserLazyRoute
  '/node/$nodeId': typeof authNodeNodeIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof authRouteWithChildren
  '/login': typeof LoginRoute
  '/$deviceId': typeof DeviceIdLazyRoute
  '/dashboard': typeof authDashboardLazyRoute
  '/gateway': typeof authGatewayLazyRoute
  '/node': typeof authNodeLazyRouteWithChildren
  '/user': typeof authUserLazyRoute
  '/node/$nodeId': typeof authNodeNodeIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/__auth': typeof authRouteWithChildren
  '/login': typeof LoginRoute
  '/$deviceId': typeof DeviceIdLazyRoute
  '/__auth/dashboard': typeof authDashboardLazyRoute
  '/__auth/gateway': typeof authGatewayLazyRoute
  '/__auth/node': typeof authNodeLazyRouteWithChildren
  '/__auth/user': typeof authUserLazyRoute
  '/__auth/node/$nodeId': typeof authNodeNodeIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/$deviceId'
    | '/dashboard'
    | '/gateway'
    | '/node'
    | '/user'
    | '/node/$nodeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/$deviceId'
    | '/dashboard'
    | '/gateway'
    | '/node'
    | '/user'
    | '/node/$nodeId'
  id:
    | '__root__'
    | '/'
    | '/__auth'
    | '/login'
    | '/$deviceId'
    | '/__auth/dashboard'
    | '/__auth/gateway'
    | '/__auth/node'
    | '/__auth/user'
    | '/__auth/node/$nodeId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  authRoute: typeof authRouteWithChildren
  LoginRoute: typeof LoginRoute
  DeviceIdLazyRoute: typeof DeviceIdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  authRoute: authRouteWithChildren,
  LoginRoute: LoginRoute,
  DeviceIdLazyRoute: DeviceIdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/__auth",
        "/login",
        "/$deviceId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/__auth": {
      "filePath": "__auth.tsx",
      "children": [
        "/__auth/dashboard",
        "/__auth/gateway",
        "/__auth/node",
        "/__auth/user"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/$deviceId": {
      "filePath": "$deviceId.lazy.tsx"
    },
    "/__auth/dashboard": {
      "filePath": "__auth/dashboard.lazy.tsx",
      "parent": "/__auth"
    },
    "/__auth/gateway": {
      "filePath": "__auth/gateway.lazy.tsx",
      "parent": "/__auth"
    },
    "/__auth/node": {
      "filePath": "__auth/node.lazy.tsx",
      "parent": "/__auth",
      "children": [
        "/__auth/node/$nodeId"
      ]
    },
    "/__auth/user": {
      "filePath": "__auth/user.lazy.tsx",
      "parent": "/__auth"
    },
    "/__auth/node/$nodeId": {
      "filePath": "__auth/node/$nodeId.lazy.tsx",
      "parent": "/__auth/node"
    }
  }
}
ROUTE_MANIFEST_END */
