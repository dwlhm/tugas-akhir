/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as _authRouteImport } from './routes/__auth'

const DeviceIdLazyRouteImport = createFileRoute('/$deviceId')()
const IndexLazyRouteImport = createFileRoute('/')()
const _authUserLazyRouteImport = createFileRoute('/__auth/user')()
const _authNodeLazyRouteImport = createFileRoute('/__auth/node')()
const _authGatewayLazyRouteImport = createFileRoute('/__auth/gateway')()
const _authDashboardLazyRouteImport = createFileRoute('/__auth/dashboard')()
const _authNodeNodeIdLazyRouteImport = createFileRoute('/__auth/node/$nodeId')()
const _authGatewayGatewayIdLazyRouteImport = createFileRoute(
  '/__auth/gateway/$gatewayId',
)()

const DeviceIdLazyRoute = DeviceIdLazyRouteImport.update({
  id: '/$deviceId',
  path: '/$deviceId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/$deviceId.lazy').then((d) => d.Route))
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const _authRoute = _authRouteImport.update({
  id: '/__auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const _authUserLazyRoute = _authUserLazyRouteImport
  .update({
    id: '/user',
    path: '/user',
    getParentRoute: () => _authRoute,
  } as any)
  .lazy(() => import('./routes/__auth/user.lazy').then((d) => d.Route))
const _authNodeLazyRoute = _authNodeLazyRouteImport
  .update({
    id: '/node',
    path: '/node',
    getParentRoute: () => _authRoute,
  } as any)
  .lazy(() => import('./routes/__auth/node.lazy').then((d) => d.Route))
const _authGatewayLazyRoute = _authGatewayLazyRouteImport
  .update({
    id: '/gateway',
    path: '/gateway',
    getParentRoute: () => _authRoute,
  } as any)
  .lazy(() => import('./routes/__auth/gateway.lazy').then((d) => d.Route))
const _authDashboardLazyRoute = _authDashboardLazyRouteImport
  .update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => _authRoute,
  } as any)
  .lazy(() => import('./routes/__auth/dashboard.lazy').then((d) => d.Route))
const _authNodeNodeIdLazyRoute = _authNodeNodeIdLazyRouteImport
  .update({
    id: '/$nodeId',
    path: '/$nodeId',
    getParentRoute: () => _authNodeLazyRoute,
  } as any)
  .lazy(() => import('./routes/__auth/node/$nodeId.lazy').then((d) => d.Route))
const _authGatewayGatewayIdLazyRoute = _authGatewayGatewayIdLazyRouteImport
  .update({
    id: '/$gatewayId',
    path: '/$gatewayId',
    getParentRoute: () => _authGatewayLazyRoute,
  } as any)
  .lazy(() =>
    import('./routes/__auth/gateway.$gatewayId.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/$deviceId': typeof DeviceIdLazyRoute
  '/dashboard': typeof _authDashboardLazyRoute
  '/gateway': typeof _authGatewayLazyRouteWithChildren
  '/node': typeof _authNodeLazyRouteWithChildren
  '/user': typeof _authUserLazyRoute
  '/gateway/$gatewayId': typeof _authGatewayGatewayIdLazyRoute
  '/node/$nodeId': typeof _authNodeNodeIdLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/$deviceId': typeof DeviceIdLazyRoute
  '/dashboard': typeof _authDashboardLazyRoute
  '/gateway': typeof _authGatewayLazyRouteWithChildren
  '/node': typeof _authNodeLazyRouteWithChildren
  '/user': typeof _authUserLazyRoute
  '/gateway/$gatewayId': typeof _authGatewayGatewayIdLazyRoute
  '/node/$nodeId': typeof _authNodeNodeIdLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/__auth': typeof _authRouteWithChildren
  '/login': typeof LoginRoute
  '/$deviceId': typeof DeviceIdLazyRoute
  '/__auth/dashboard': typeof _authDashboardLazyRoute
  '/__auth/gateway': typeof _authGatewayLazyRouteWithChildren
  '/__auth/node': typeof _authNodeLazyRouteWithChildren
  '/__auth/user': typeof _authUserLazyRoute
  '/__auth/gateway/$gatewayId': typeof _authGatewayGatewayIdLazyRoute
  '/__auth/node/$nodeId': typeof _authNodeNodeIdLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/$deviceId'
    | '/dashboard'
    | '/gateway'
    | '/node'
    | '/user'
    | '/gateway/$gatewayId'
    | '/node/$nodeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/$deviceId'
    | '/dashboard'
    | '/gateway'
    | '/node'
    | '/user'
    | '/gateway/$gatewayId'
    | '/node/$nodeId'
  id:
    | '__root__'
    | '/'
    | '/__auth'
    | '/login'
    | '/$deviceId'
    | '/__auth/dashboard'
    | '/__auth/gateway'
    | '/__auth/node'
    | '/__auth/user'
    | '/__auth/gateway/$gatewayId'
    | '/__auth/node/$nodeId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  _authRoute: typeof _authRouteWithChildren
  LoginRoute: typeof LoginRoute
  DeviceIdLazyRoute: typeof DeviceIdLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$deviceId': {
      id: '/$deviceId'
      path: '/$deviceId'
      fullPath: '/$deviceId'
      preLoaderRoute: typeof DeviceIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__auth': {
      id: '/__auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__auth/user': {
      id: '/__auth/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof _authUserLazyRouteImport
      parentRoute: typeof _authRoute
    }
    '/__auth/node': {
      id: '/__auth/node'
      path: '/node'
      fullPath: '/node'
      preLoaderRoute: typeof _authNodeLazyRouteImport
      parentRoute: typeof _authRoute
    }
    '/__auth/gateway': {
      id: '/__auth/gateway'
      path: '/gateway'
      fullPath: '/gateway'
      preLoaderRoute: typeof _authGatewayLazyRouteImport
      parentRoute: typeof _authRoute
    }
    '/__auth/dashboard': {
      id: '/__auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof _authDashboardLazyRouteImport
      parentRoute: typeof _authRoute
    }
    '/__auth/node/$nodeId': {
      id: '/__auth/node/$nodeId'
      path: '/$nodeId'
      fullPath: '/node/$nodeId'
      preLoaderRoute: typeof _authNodeNodeIdLazyRouteImport
      parentRoute: typeof _authNodeLazyRoute
    }
    '/__auth/gateway/$gatewayId': {
      id: '/__auth/gateway/$gatewayId'
      path: '/$gatewayId'
      fullPath: '/gateway/$gatewayId'
      preLoaderRoute: typeof _authGatewayGatewayIdLazyRouteImport
      parentRoute: typeof _authGatewayLazyRoute
    }
  }
}

interface _authGatewayLazyRouteChildren {
  _authGatewayGatewayIdLazyRoute: typeof _authGatewayGatewayIdLazyRoute
}

const _authGatewayLazyRouteChildren: _authGatewayLazyRouteChildren = {
  _authGatewayGatewayIdLazyRoute: _authGatewayGatewayIdLazyRoute,
}

const _authGatewayLazyRouteWithChildren =
  _authGatewayLazyRoute._addFileChildren(_authGatewayLazyRouteChildren)

interface _authNodeLazyRouteChildren {
  _authNodeNodeIdLazyRoute: typeof _authNodeNodeIdLazyRoute
}

const _authNodeLazyRouteChildren: _authNodeLazyRouteChildren = {
  _authNodeNodeIdLazyRoute: _authNodeNodeIdLazyRoute,
}

const _authNodeLazyRouteWithChildren = _authNodeLazyRoute._addFileChildren(
  _authNodeLazyRouteChildren,
)

interface _authRouteChildren {
  _authDashboardLazyRoute: typeof _authDashboardLazyRoute
  _authGatewayLazyRoute: typeof _authGatewayLazyRouteWithChildren
  _authNodeLazyRoute: typeof _authNodeLazyRouteWithChildren
  _authUserLazyRoute: typeof _authUserLazyRoute
}

const _authRouteChildren: _authRouteChildren = {
  _authDashboardLazyRoute: _authDashboardLazyRoute,
  _authGatewayLazyRoute: _authGatewayLazyRouteWithChildren,
  _authNodeLazyRoute: _authNodeLazyRouteWithChildren,
  _authUserLazyRoute: _authUserLazyRoute,
}

const _authRouteWithChildren = _authRoute._addFileChildren(_authRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  _authRoute: _authRouteWithChildren,
  LoginRoute: LoginRoute,
  DeviceIdLazyRoute: DeviceIdLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
